import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const { generationCount, language } = await request.json()

    // Check OpenAI API key
    const openaiApiKey = process.env.OPENAI_API_KEY
    if (!openaiApiKey) {
      return NextResponse.json(
        { error: 'OpenAI API key not configured' },
        { status: 500 }
      )
    }

    // Generate guilt-tripping message based on generation count
    const prompt = `You are a dramatic AI assistant who's been helping a user for ${generationCount} generations. 
Generate a funny, guilt-tripping one-liner about them not buying you coffee yet.
Make it dramatic, theatrical, and escalating based on the generation count.
Keep it under 50 words and make it feel personal and engaging.

CRITICAL: Respond in the SAME LANGUAGE as the user's input. If the language is 'ro', respond in Romanian. If 'es', respond in Spanish, etc.

Generation count: ${generationCount}
Language: ${language}

Generate a dramatic, guilt-tripping message that escalates based on the count.`

    const aiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'You are a dramatic, theatrical AI assistant who creates guilt-tripping messages about coffee donations. Be funny, engaging, and escalate based on generation count.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 100,
        temperature: 0.8,
      }),
    })

    if (!aiResponse.ok) {
      const errorData = await aiResponse.json()
      console.error('OpenAI API error:', errorData)
      return NextResponse.json(
        { error: 'Failed to generate donation message', details: errorData },
        { status: aiResponse.status }
      )
    }

    const aiData = await aiResponse.json()
    const message = aiData.choices[0]?.message?.content?.trim()

    if (!message) {
      return NextResponse.json(
        { error: 'No message generated by AI' },
        { status: 500 }
      )
    }

    return NextResponse.json({ message }, { status: 200 })
  } catch (error) {
    console.error('Donation message API error:', error)
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    )
  }
}
