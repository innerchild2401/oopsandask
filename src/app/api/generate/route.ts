import { NextRequest, NextResponse } from 'next/server'
import { GenerateMessageRequest, GenerateMessageResponse } from '@/lib/types'
import { supabaseHelpers } from '@/lib/supabase'
import { getPromptTemplate } from '@/lib/promptEngine'

export async function POST(request: NextRequest) {
  try {
    const body: GenerateMessageRequest = await request.json()
    
    // Validate request
    if (!body.originalText?.trim()) {
      return NextResponse.json(
        { error: 'Original text is required' },
        { status: 400 }
      )
    }

    if (!['oops', 'ask', 'ask_attorney'].includes(body.mode)) {
      return NextResponse.json(
        { error: 'Invalid mode. Must be oops, ask, or ask_attorney' },
        { status: 400 }
      )
    }

    // Check OpenAI API key
    const openaiApiKey = process.env.OPENAI_API_KEY
    if (!openaiApiKey) {
      return NextResponse.json(
        { error: 'OpenAI API key not configured' },
        { status: 500 }
      )
    }

    // Generate session if not provided
    let sessionId = body.sessionId
    if (!sessionId) {
      sessionId = crypto.randomUUID()
    }

    // Load or create user session
    await supabaseHelpers.getOrCreateSession(sessionId)

    // No caching for generated outputs - always generate fresh content

    // Prepare AI prompt based on mode and language
    const prompt = generatePrompt(body.mode, body.originalText, body.recipientName, body.recipientRelationship)

    console.log('ü§ñ Generating AI response:', {
      mode: body.mode,
      language: body.language,
      originalText: body.originalText.substring(0, 50) + '...',
      sessionId: sessionId.substring(0, 8) + '...',
      promptLength: prompt.length
    })

    // Call OpenAI API
    const startTime = Date.now()
    const aiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: getPromptTemplate(body.mode, body.language || 'en')
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 180,
        temperature: 0.8,
        stop: ["<END>"],
      }),
    })

    const processingTime = Date.now() - startTime

    if (!aiResponse.ok) {
      const errorData = await aiResponse.json()
      console.error('OpenAI API error:', errorData)
      return NextResponse.json(
        { error: 'Failed to generate message', details: errorData },
        { status: aiResponse.status }
      )
    }

    const aiData = await aiResponse.json()
    let generatedText = aiData.choices[0]?.message?.content?.trim()

    if (!generatedText) {
      return NextResponse.json(
        { error: 'No content generated by AI' },
        { status: 500 }
      )
    }

    // Post-process: trim safely if needed to ensure clean completion
    if (generatedText.length > 280) {
      const cutoff = generatedText.slice(0, 280)
      const lastPunct = Math.max(cutoff.lastIndexOf('.'), cutoff.lastIndexOf('!'), cutoff.lastIndexOf('?'))
      generatedText = cutoff.slice(0, lastPunct + 1)
    }

    // Calculate token usage
    const tokensUsed = aiData.usage?.total_tokens || 0

    console.log('‚úÖ AI generation successful:', {
      tokensUsed,
      processingTime: `${processingTime}ms`,
      textLength: generatedText.length
    })

    // Get language ID for database
    const languageId = await getLanguageId(body.language || 'en')

    // Save to database
    const messageData = {
      session_id: sessionId,
      mode: body.mode,
      language_id: languageId,
      original_text: body.originalText.trim(),
      ai_generated_text: generatedText,
      ai_model: 'gpt-4o-mini',
      tokens_used: tokensUsed,
      processing_time_ms: processingTime,
      context_metadata: {
        persona: body.persona,
        relationship: body.relationship,
        language: body.language || 'en'
      }
    }

    // Try to save to database, but don't fail if it doesn't work
    try {
      await supabaseHelpers.saveGeneratedMessage(messageData)
    } catch (dbError) {
      console.warn('‚ö†Ô∏è Failed to save to database:', dbError)
      // Continue anyway - this shouldn't break the user experience
    }

    // Return response
    const response: GenerateMessageResponse = {
      id: crypto.randomUUID(),
      generatedText,
      tokensUsed,
      processingTimeMs: processingTime,
    }

    return NextResponse.json(response)

  } catch (error) {
    console.error('‚ùå API route error:', error)
    return NextResponse.json(
      { 
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}


// Get language ID from language code
async function getLanguageId(languageCode: string): Promise<string> {
  try {
    const { supabase } = await import('@/lib/supabase')
    
    // First try to find existing language
    const { data: existing } = await supabase
      .from('languages')
      .select('id')
      .eq('code', languageCode)
      .maybeSingle() // Use maybeSingle() instead of single() to avoid 406 error
    
    if (existing?.id) {
      return existing.id
    }

    // If not found, create a new language entry
    const { data: newLang, error: createError } = await supabase
      .from('languages')
      .insert({
        code: languageCode,
        name: languageCode.charAt(0).toUpperCase() + languageCode.slice(1),
        native_name: languageCode.charAt(0).toUpperCase() + languageCode.slice(1),
        country_codes: [],
        is_active: true
      })
      .select('id')
      .single()

    if (createError) {
      console.warn('Failed to create language:', createError)
      // Try to get English as fallback
      const { data: enData } = await supabase
        .from('languages')
        .select('id')
        .eq('code', 'en')
        .maybeSingle() // Use maybeSingle() instead of single() to avoid 406 error
      return enData?.id || '00000000-0000-0000-0000-000000000000'
    }

    return newLang?.id || '00000000-0000-0000-0000-000000000000'
  } catch (error) {
    console.warn('Language ID lookup failed:', error)
    return '00000000-0000-0000-0000-000000000000'
  }
}

function generatePrompt(mode: string, originalText: string, recipientName?: string, recipientRelationship?: string): string {
  let prompt = `Original request: "${originalText}"`
  
  if (recipientName && recipientRelationship) {
    prompt += `\n\nThis message is for ${recipientName} (${recipientRelationship}). Please personalize the response to address them directly and consider the relationship context.`
  } else if (recipientName) {
    prompt += `\n\nThis message is for ${recipientName}. Please personalize the response to address them directly.`
  }
  
  prompt += `\n\nPlease transform this into a dramatic, over-the-top response that matches your personality and expertise. Use all the cultural references, fake citations, and theatrical flair you're known for.`
  
  prompt += `\n\nIMPORTANT: Write 2-3 sentences max that are COMPLETE and funny. End with proper punctuation.`
  
  return prompt
}
