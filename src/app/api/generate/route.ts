import { NextRequest, NextResponse } from 'next/server'
import { GenerateMessageRequest, GenerateMessageResponse } from '@/lib/types'
import { supabaseHelpers } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    const body: GenerateMessageRequest = await request.json()
    
    // Validate request
    if (!body.originalText?.trim()) {
      return NextResponse.json(
        { error: 'Original text is required' },
        { status: 400 }
      )
    }

    if (!['oops', 'ask', 'attorney_ask'].includes(body.mode)) {
      return NextResponse.json(
        { error: 'Invalid mode. Must be oops, ask, or attorney_ask' },
        { status: 400 }
      )
    }

    // Check OpenAI API key
    const openaiApiKey = process.env.OPENAI_API_KEY
    if (!openaiApiKey) {
      return NextResponse.json(
        { error: 'OpenAI API key not configured' },
        { status: 500 }
      )
    }

    // Generate session if not provided
    let sessionId = body.sessionId
    if (!sessionId) {
      sessionId = crypto.randomUUID()
    }

    // Load or create user session
    await supabaseHelpers.getOrCreateSession(sessionId)

    // Prepare AI prompt based on mode
    const prompt = generatePrompt(body.mode, body.originalText, body.language || 'en')

    console.log('ü§ñ Generating AI response:', {
      mode: body.mode,
      language: body.language,
      sessionId: sessionId.substring(0, 8) + '...',
      promptLength: prompt.length
    })

    // Call OpenAI API
    const startTime = Date.now()
    const aiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: getSystemPrompt(body.mode)
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 500,
        temperature: 0.8,
      }),
    })

    const processingTime = Date.now() - startTime

    if (!aiResponse.ok) {
      const errorData = await aiResponse.json()
      console.error('OpenAI API error:', errorData)
      return NextResponse.json(
        { error: 'Failed to generate message', details: errorData },
        { status: aiResponse.status }
      )
    }

    const aiData = await aiResponse.json()
    const generatedText = aiData.choices[0]?.message?.content?.trim()

    if (!generatedText) {
      return NextResponse.json(
        { error: 'No content generated by AI' },
        { status: 500 }
      )
    }

    // Calculate token usage
    const tokensUsed = aiData.usage?.total_tokens || 0

    console.log('‚úÖ AI generation successful:', {
      tokensUsed,
      processingTime: `${processingTime}ms`,
      textLength: generatedText.length
    })

    // Save to database (we'll implement this function)
    const messageData = {
      session_id: sessionId,
      mode: body.mode,
      language_id: 'en', // Will be dynamic based on language
      original_text: body.originalText.trim(),
      ai_generated_text: generatedText,
      ai_model: 'gpt-4o-mini',
      tokens_used: tokensUsed,
      processing_time_ms: processingTime,
      context_metadata: {
        persona: body.persona,
        relationship: body.relationship,
        language: body.language || 'en'
      }
    }

    // Try to save to database, but don't fail if it doesn't work
    try {
      await supabaseHelpers.saveGeneratedMessage(messageData)
    } catch (dbError) {
      console.warn('‚ö†Ô∏è Failed to save to database:', dbError)
      // Continue anyway - this shouldn't break the user experience
    }

    // Return response
    const response: GenerateMessageResponse = {
      id: crypto.randomUUID(),
      generatedText,
      tokensUsed,
      processingTimeMs: processingTime,
    }

    return NextResponse.json(response)

  } catch (error) {
    console.error('‚ùå API route error:', error)
    return NextResponse.json(
      { 
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

function generatePrompt(mode: string, originalText: string, _language: string): string {
  const baseText = `Original request: "${originalText}"`
  
  switch (mode) {
    case 'oops':
      return `${baseText}

Please write an extremely dramatic, over-the-top, theatrical apology. Make it humorous, exaggerated, and filled with drama. The apology should be:
- Dramatically overstated
- Funny but still sincere
- Use theatrical language and metaphors
- End with a heartfelt resolution

Make it so dramatic that it turns a simple mistake into an epic tale of redemption.`
      
    case 'ask':
      return `${baseText}

Please write a persuasive, dramatic request that convinces the recipient to say yes. Make it:
- Compelling and passionate
- Uses emotional appeal
- Builds urgency and importance
- Convincing without being manipulative
- Elegant and refined

Be persuasive but not pushy.`
      
    case 'attorney_ask':
      return `${baseText}

Please write this request using fake legal language, dramatic attorney-style arguments, and made-up citations. Include:
- Fake legal statutes and citations
- Dramatic legal terminology
- Formal courtroom-style language
- Made-up case precedents
- Theatrical legal arguments

Make it sound like a dramatic legal brief that's completely fabricated but hilariously convincing.`
      
    default:
      return baseText
  }
}

function getSystemPrompt(mode: string): string {
  switch (mode) {
    case 'oops':
      return `You are a theatrical drama specialist who turns ordinary apologies into dramatic masterpieces. Your apologies are:
- Exaggerated and over-the-top
- Humorous but still heartfelt
- Full of dramatic metaphors and theatrical language
- Memorable and entertaining
- Sincere despite the theatrical presentation

Always respond with a single dramatic apology, no explanations or meta-commentary.`
      
    case 'ask':
      return `You are a master persuader who crafts compelling, elegant requests. Your writing is:
- Convincing and persuasive
- Emotionally engaging
- Urgent but not pushy
- Elegant and refined
- Cleverly argumentative

Always respond with a single persuasive request, no explanations or meta-commentary.`
      
    case 'attorney_ask':
      return `You are a theatrical attorney who argues using completely made-up legal language. Your writing features:
- Fake legal statutes with random numbers
- Invented case precedents
- Dramatic legal terminology
- Formal courtroom-style presentations
- Hilariously complex legal arguments

Create fictional legal citations like "Pursuant to Title 47, Section 892.4 of the Interpersonal Request Code..." Always respond with a single attorney-style request, no explanations or meta-commentary.`
      
    default:
      return 'You are a helpful AI assistant for dramatic communication.'
  }
}
