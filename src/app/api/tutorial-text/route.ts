import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const { step, language } = await request.json()

    // Check OpenAI API key
    const openaiApiKey = process.env.OPENAI_API_KEY
    if (!openaiApiKey) {
      return NextResponse.json(
        { error: 'OpenAI API key not configured' },
        { status: 500 }
      )
    }

    // Generate tutorial text based on step and language
    const prompt = `You are creating tutorial text for a mobile app called "Oops & Ask" that generates dramatic, humorous messages.

Generate a title and description for this tutorial step: "${step}"

Requirements:
- Title: 1-4 words, catchy and clear
- Description: 1-2 sentences, maximum 20 words
- Keep it simple and actionable
- Use emojis sparingly but effectively
- Make it sound friendly and encouraging
- Focus on what the user should do next

CRITICAL: Respond in the SAME LANGUAGE as specified. If language is 'ro', respond in Romanian. If 'es', respond in Spanish, etc.

Language: ${language}
Step: ${step}

Respond with JSON format:
{
  "title": "Your title here",
  "description": "Your description here"
}`

    const aiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'You are a UX writer creating concise, friendly tutorial text for a mobile app. Always respond in the specified language.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 150,
        temperature: 0.7,
      }),
    })

    if (!aiResponse.ok) {
      const errorData = await aiResponse.json()
      console.error('OpenAI API error:', errorData)
      return NextResponse.json(
        { error: 'Failed to generate tutorial text', details: errorData },
        { status: aiResponse.status }
      )
    }

    const aiData = await aiResponse.json()
    const content = aiData.choices[0]?.message?.content?.trim()

    if (!content) {
      return NextResponse.json(
        { error: 'No content generated by AI' },
        { status: 500 }
      )
    }

    try {
      const parsed = JSON.parse(content)
      return NextResponse.json(parsed, { status: 200 })
    } catch (parseError) {
      // Fallback if JSON parsing fails
      const lines = content.split('\n')
      const title = lines.find((line: string) => line.includes('title'))?.split(':')[1]?.replace(/['"]/g, '').trim() || 'Tutorial Step'
      const description = lines.find((line: string) => line.includes('description'))?.split(':')[1]?.replace(/['"]/g, '').trim() || 'Follow the instructions to continue.'
      
      return NextResponse.json({ title, description }, { status: 200 })
    }
  } catch (error) {
    console.error('Tutorial text API error:', error)
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    )
  }
}
